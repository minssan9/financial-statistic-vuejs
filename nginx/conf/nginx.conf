
#user  nobody;
worker_processes  1;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"'; 
    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name   fn.voyagerss.com;
        access_log   logs/domain1.access.log  main;
        #charset koi8-r;  

        root dist;
        index  index.html index.htm; 

        location @rewrites{
            rewrite ^(.*)$ /index.html last;
        }

        location / {
            root   dist;
            index  index.html index.htm;
            try_files $uri $uri/ @rewrites;
        }



        location /api {
            proxy_pass http://localhost:34000;
        }       

        location /fn {
            root   dist/fn;
            index  index.html index.htm; 
            # rewrite ^/shop(/.*)$ $1 break; # url에서 shop 뒤에 있는 URL을 전부 그대로 사용.
            # proxy_bind http://localhost:8081/;
            # proxy_pass http://localhost:8081/;
            # proxy_set_header X-Real-IP $remote_addr; # 실제 접속자의 IP를 X-Real-IP 헤더에 입혀서 전송.
            # proxy_set_header Host $host;
            # proxy_redirect off;
        }
                                  
        #error_page  404              /404.html;
        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }       

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    
    upstream fn_frontend_upstream {
        # server 127.0.0.3:8000 weight=5;
        server 127.0.0.1:80 weight=8;
        server 127.0.0.1:8080 weight=8;
        # server voyagerss.firebaseapp.com/; 
    }

    upstream fn_frontend_upstream {
        # server 127.0.0.3:8000 weight=5;
        server 127.0.0.1:34000 weight=8;
        server 127.0.0.1:34001 weight=8;
        # server voyagerss.firebaseapp.com/; 
    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
